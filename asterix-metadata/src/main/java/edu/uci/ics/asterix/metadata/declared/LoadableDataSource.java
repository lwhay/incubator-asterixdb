/*
 * Copyright 2009-2013 by The Regents of the University of California
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * you may obtain a copy of the License from
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package edu.uci.ics.asterix.metadata.declared;

import java.io.IOException;
import java.util.List;
import java.util.Map;

import edu.uci.ics.asterix.common.exceptions.AsterixException;
import edu.uci.ics.asterix.metadata.entities.Dataset;
import edu.uci.ics.asterix.metadata.entities.InternalDatasetDetails;
import edu.uci.ics.asterix.metadata.utils.DatasetUtils;
import edu.uci.ics.asterix.om.types.ARecordType;
import edu.uci.ics.asterix.om.types.IAType;
import edu.uci.ics.hyracks.algebricks.common.exceptions.AlgebricksException;
import edu.uci.ics.hyracks.algebricks.core.algebra.base.LogicalVariable;
import edu.uci.ics.hyracks.algebricks.core.algebra.properties.DefaultNodeGroupDomain;
import edu.uci.ics.hyracks.algebricks.core.algebra.properties.ILocalStructuralProperty;
import edu.uci.ics.hyracks.algebricks.core.algebra.properties.INodeDomain;

public class LoadableDataSource extends AqlDataSource {

    private final INodeDomain domain;
    private final IAType[] schemaTypes;
    private final Dataset targetDataset;
    private final List<String> partitioningKeys;
    private final String adapter;
    private final Map<String, String> adapterProperties;
    private final boolean isPKAutoGenerated;

    public boolean isPKAutoGenerated() {
        return isPKAutoGenerated;
    }

    public LoadableDataSource(Dataset targetDataset, IAType itemType, String adapter, Map<String, String> properties)
            throws AlgebricksException, IOException {
        super(new AqlSourceId("loadable_dv", "loadable_ds"), "loadable_dv", "loadable_source",
                AqlDataSourceType.LOADABLE);
        this.targetDataset = targetDataset;
        this.adapter = adapter;
        this.adapterProperties = properties;
        partitioningKeys = DatasetUtils.getPartitioningKeys(targetDataset);
        domain = new DefaultNodeGroupDomain(DatasetUtils.getNodegroupName(targetDataset));
        ARecordType recType = (ARecordType) itemType;
        isPKAutoGenerated = ((InternalDatasetDetails) targetDataset.getDatasetDetails()).isAutogenerated();
        if (isPKAutoGenerated) {
            // Since the key is auto-generated, we need to use another
            // record type which has all fields except the PK
            String[] fieldNames = new String[recType.getFieldNames().length - 1];
            IAType[] fieldTypes = new IAType[recType.getFieldTypes().length - 1];
            int i = 0;
            int j = 0;
            while (i < fieldNames.length) {
                if (!((ARecordType) itemType).getFieldNames()[j].equals(partitioningKeys.get(0))) {
                    fieldNames[i] = ((ARecordType) itemType).getFieldNames()[j];
                    fieldTypes[i] = ((ARecordType) itemType).getFieldTypes()[j];
                    i++;
                } else {
                }
                j++;
            }
            try {
                itemType = new ARecordType(recType.getTypeName(), fieldNames, fieldTypes, recType.isOpen());
            } catch (AsterixException e) {
                throw new AlgebricksException(e);
            }
        }
        schemaTypes = new IAType[] { itemType };
    }

    @Override
    public IAType[] getSchemaTypes() {
        return schemaTypes;
    }

    @Override
    public INodeDomain getDomain() {
        return domain;
    }

    @Override
    public void computeLocalStructuralProperties(List<ILocalStructuralProperty> localProps,
            List<LogicalVariable> variables) {
    }

    public List<String> getPartitioningKeys() {
        return partitioningKeys;
    }

    public String getAdapter() {
        return adapter;
    }

    public Map<String, String> getAdapterProperties() {
        return adapterProperties;
    }

    public IAType getLoadedType() {
        return schemaTypes[schemaTypes.length - 1];
    }

    public Dataset getTargetDataset() {
        return targetDataset;
    }
}
