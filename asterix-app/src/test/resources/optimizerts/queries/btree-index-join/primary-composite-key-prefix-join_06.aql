/*
 * Description  : Notice the query hint to use an indexed nested-loops join plan in both predicates.
 *              : We expect a plan to have a self-join, which probes dataset Namesâ€™s with a prefix of its primary index.
 * Expected Res : Success
 * Date         : 11th November 2014
 */

drop dataverse test if exists;
create dataverse test;
use dataverse test;

create type Name as open {
    fname : string,
    lname : string
}

create dataset Names(Name) primary key fname,lname;

write output to nc1:"rttest/btree-index-join_primary-composite-key-prefix-prefix-join_06.adm";

for $emp1 in dataset('Names') 
for $emp2 in dataset('Names') 
where $emp1.fname /*+ indexnl*/= $emp2.fname and $emp1.lname /*+ indexnl*/< $emp2.lname
return {"emp1": $emp1, "emp2": $emp2 }