/*
 * Description  : Test that left-outer-join may use two available indexes, one for primary index in prob subtree and another for secondary btree index in index subtree.
 * Issue        : 730, 741
 * Expected Res : Success
 * Date         : 8th May 2014
 */

drop dataverse test if exists;
create dataverse test;
use dataverse test;

create type TwitterUserType as closed {
	screen-name: string,
	lang: string,
	friends-count: int32,
	statuses-count: int32,
	name: string,
	followers-count: int32
} 

create type TweetMessageNestedType as closed {
	tweetid: int64,
        user: TwitterUserType,
        sender-location: point,
	send-time: datetime,
        referred-topics: {{ string }},
	message-text: string,
	countA: int32,
	countB: int32
}

create type TweetMessageType as closed {
	nested: TweetMessageNestedType
}

create dataset TweetMessages(TweetMessageType)
primary key nested.tweetid;

create index msgCountBIx on TweetMessages(nested.countB) type btree;

write output to nc1:"rttest/btree-index-join_leftouterjoin-probe-pidx-with-join-btree-sidx_02.adm";

for $t1 in dataset('TweetMessages')
where $t1.nested.tweetid < int64("10")
order by $t1.nested.tweetid
return {
"tweetid1": $t1.nested.tweetid,
"count1":$t1.nested.countA,
"t2info": for $t2 in dataset('TweetMessages')
                        where $t1.nested.countA /* +indexnl */= $t2.nested.countB and
                        $t1.nested.tweetid != $t2.nested.tweetid
                        order by $t2.nested.tweetid
                        return {"tweetid2": $t2.nested.tweetid,
                                       "count2":$t2.nested.countB}
};

